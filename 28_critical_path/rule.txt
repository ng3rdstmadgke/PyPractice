■問題
結合点pから結合点qまでの作業にかかる日数が列挙されているものとする。
結合点Aから結合点A+n-1(nは結合点の数: n=7のときA+n-1はG)までのクリティカルパスとその所要日数を求めよ。

■入力例 (1行目は結合点の数と作業の数)
7 9
A B 10
A C 3
B D 4
B E 7
C D 7
C F 9
D E 2
E G 1
F G 7

■出力例
A -> C -> F -> G
19

■方針
diagram = [['A', 'B', '10'], ['A', 'C', '3'], ['B', 'D', '4'], ['B', 'E', '7'], ['C', 'D', '7'], ['C', 'F', '9'], ['D', 'E', '2'], ['E', 'G', '1'], ['F', 'G', '7']]
node_status = [["A", 0, 0, 0], ["B", 10, 9, 1], ...]
▼各ノードの最早結合点時刻を求める
    - node"X(1)"の最早結合点時刻を0に設定する。
    - node"X(n)"の最早結合点時刻を求めるとする。
    - diagram[m][1]が"X(n)"となる要素を抽出し、「X(n-1)の最早結合点時刻+diagram[m][2]」が最も大きくなる要素を選択する。
    - この処理をnodeの数だけ行う。
▼各ノードの最遅結合点時刻を求める
    - node"X(-1)"の最早結合点時刻を最遅結合点時刻に設定する。
    - node"X(n-1)"の最遅結合点時刻を求めるとする
    - diagram[m][0]が"X(n-1)"となる要素をdiagramから抽出し、「X(n)の最遅結合点時刻+diagram[m][2]」が最も小さくなる要素を選択する。
    - この処理をnodeの数だけ行う
▼各ノードの余裕日数を求める
    - 「最早結合点時刻-最遅結合点時刻」で各ノードの余裕日数を求める

▼余裕日数が0日のノードを抽出。最早結合点時刻を出力
    - 余裕日数が0日のノードを抽出し、降順に並べる。

■答え
[[ノード, 最早結合点時刻, 最遅結合点時刻, 余裕日数],...]
[['A', 0, 0, 0], ['B', 10, 11, 1], ['C', 3, 3, 0], ['D', 14, 16, 2], ['E', 17, 18, 1], ['F', 12, 12, 0], ['G', 19, 19, 0]]