あらかじめ用意した「辞書ファイル」の内容に基づいて、ユーザーとしりとりをする対話型プログラム。
辞書ファイルのフォーマットは、キャリッジリターンで区切られた半角英字のみのテキストファイルとする。

このプログラムのおおまかな仕様を以下に示す。

乱数により、先攻と後攻を決定する。ユーザーが先攻の場合はランダムで最初の文字を決定し、コンピュータが先攻の場合はランダムで最初の単語を出力する
ユーザーが辞書にない単語を入力すると再入力を促す（半角英字以外の文字が入っていてもメッセージは同じでよい）
すでに使われた単語をユーザーが入力すると、以下のメッセージを出力して終了する。「その言葉は [回数] 回目に [あなた|わたし] が使用しています。わたしの勝ちです。今回のしりとりでは [使用単語数] 個の単語を使用しました。」
コンピュータの番で、辞書の中に使える単語が残ってない場合、以下のメッセージを出力して終了する。「まいりました！あなたの勝ちです。　今回のしりとりでは [使用単語数] 個の単語を使用しました。」

■パターン
ユーザー
勝ち
- 辞書の中に使える単語がない場合 100

負け
- 以前使用した単語を使用した場合 120
- 入力した単語の先頭が、直前の単語の末尾の文字でなかった時 121

やり直し
- 辞書に登録されていない単語を入力した時 130

CPU
負け
- 辞書の中に使える単語がない場合 220


■設計
class WordChain
- main
    - 先攻後攻を決めるメソッド
    - cpuが先攻の時と、ユーザーが先攻の時を切り分けるメソッド
        - cpuが入力するメソッド(入力 >> 判断 >> ターン交代)
            - 辞書に頭文字から始まる文字列が存在するか判定し、存在していれば続行、なければフラグを返して終了
            - 文字入力
        - ユーザーが入力するメソッド(入力 >> 判断 >> 表示 >> ターン交代)
            - 辞書に頭文字から始まる文字列が存在するか判定し、存在していれば続行、なければフラグを返して終了
            - 文字入力
            - 入力された文字から続行可能かを判断、ルール違反があった場合はフラグを返して終了、やり直しの場合は入力にもどる
        - フラグから処理を判断する
class DBUtil
■ディクショナリー
- テーブルにデータを格納する　insert_into_dictionary
- 使用した単語のdelフラグを1にする delete_used_word_from_dictionary
- 前回使用された単語から最適な単語をdictionaryから選択する fetch_optimal_word_from_dictionary
- 指定された単語がdictionaryに存在するか確認する　confirm_word_in_dictionary
-


■ユーズドワード
- これまでの単語全てをselectする　select_all_from_used_words
- DBに単語を登録する　insert_into_used_words
- これまで使用した単語をリストで返す　fetch_used_words_list
- 引数にとった単語が何回目にどちらのプレイヤーによって使用されたかを判定する　player_use_the_word
- 引数にとった単語の先頭文字が前回使用された単語の末尾文字と一致しているかを判定　compare_start_and_end
-


